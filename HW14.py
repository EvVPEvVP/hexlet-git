Плюсы:

- из-за TDD пишу больше тестов и стараюсь делать это регулярно, не откладывая на потом. Это повышает тестовое покрытие моего кода.
- TDD облегчает мне рефакторинг, так как я уже написал множество тестов. 
- Следуя TDD, обычно думаю о том, как мой код будет проверяться, еще до его написания. Это помогает проектировать более тестируемые и модульные компоненты.

Минусы:

- не всегда строго следую  циклу TDD (красный-зеленый-рефакторинг), иногда пропуская шаги или меняя их порядок. Это может приводить к менее качественному дизайну.
- Фокусируясь на юнит-тестах, могу упускать из виду другие важные виды тестирования, такие как интеграционное, сквозное и т.д
- часто, следуя TDD, идет чрезмерная концентрация на деталях реализации и локальной организации кода, забывая о высокоуровневом дизайне и архитектуре системы в целом.

На данный момент мой стиль TDD больше похож на продуктивную технику тестирования, чем на парадигму разработки/дизайна. 
Использую TDD в первую очередь для того, чтобы писать больше тестов, улучшать тестируемость кода и облегчать рефакторинг. 

Понимаю, что TDD может использоваться и как техника проектирования, но на моем текущем уровне мне комфортнее воспринимать TDD именно как практику тестирования..




