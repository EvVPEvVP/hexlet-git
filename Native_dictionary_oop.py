class NativeDictionary:
    def __init__(self, size=100):
        """
        Предусловие: size - целое положительное число, представляющее максимальное количество элементов в словаре.
        Постусловие: Создает новый объект NativeDictionary заданного размера.
        """
        self.size = size
        self.keys = [None] * size
        self.values = [None] * size

    def _hash_function(self, key):
        """
        Предусловие: key - строка, представляющая ключ, который нужно хешировать.
        Постусловие: Возвращает хеш-код ключа, который будет использован для индексирования.
        """
        return hash(key) % self.size

    def is_key(self, key):
        """
        Предусловие: key - строка, представляющая ключ, который нужно проверить наличие в словаре.
        Предусловие: словарь существует
        Постусловие: Возвращает True, если ключ присутствует в словаре, иначе возвращает False.
        """
        index = self._hash_function(key)
        return self.keys[index] == key

    def put(self, key, value):
        """
        Предусловие: key - строка, представляющая ключ, который нужно добавить в словарь.
                     value - любое значение, которое нужно связать с ключом.
                     словарь существует.
        Постусловие: Добавляет пару ключ-значение в словарь. Если ключ уже существует, значение будет обновлено.
        """
        index = self._hash_function(key)
        self.keys[index] = key
        self.values[index] = value

    def get(self, key):
        """
        Предусловие: key - строка, представляющая ключ, который нужно использовать для поиска значения.
        Предусловие: словарь существует
        Постусловие: Возвращает значение, связанное с указанным ключом, если такой ключ существует, иначе возвращает None.
        """
        index = self._hash_function(key)
        if self.keys[index] == key:
            return self.values[index]
        return None

    def get_status_is_key(self, key):
        """
        Предусловие: key - строка, представляющая ключ, который нужно проверить наличие в словаре.
        Постусловие: Возвращает True, если ключ присутствует в словаре, иначе возвращает False.
        """
        return self.is_key(key)

    def get_status_get(self, key):
        """
        Предусловие: key - строка, представляющая ключ, который нужно использовать для поиска значения.
        Постусловие: Возвращает "Success" (успех), если ключ присутствует в словаре, иначе возвращает None.
        """
        if self.is_key(key):
            return "Success"
        return None
